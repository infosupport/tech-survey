generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Survey {
  id         String     @id @default(cuid())
  surveyName String     @unique
  questions  Question[]
}

model Role {
  id        String     @id @default(cuid())
  role      String
  questions Question[] @relation("QuestionToRole")
  users     User[]     @relation("UserRole")
  default   Boolean    @default(false)
}

model Question {
  id             String           @id @default(cuid())
  surveyId       String
  questionText   String
  survey         Survey           @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  QuestionResult QuestionResult[]
  roles          Role[]           @relation("QuestionToRole")
}

model AnswerOption {
  id             String           @id @default(cuid())
  option         Int
  QuestionResult QuestionResult[]
}

model QuestionResult {
  id         String       @id @default(cuid())
  userId     String
  questionId String
  answerId   String
  answer     AnswerOption @relation(fields: [answerId], references: [id], onDelete: Cascade)
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  roles           Role[]           @relation("UserRole")
  accounts        Account[]
  questionResults QuestionResult[]
  sessions        Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
